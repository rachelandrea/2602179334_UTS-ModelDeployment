# # -*- coding: utf-8 -*-
# """PredictionUTS_Model_Deployment_2602179334_Rachel_Andrea_Sumaiku.ipynb

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/1OcMWE8zC_B0VTvRsI3RElaGnKgsUVYei

# #3. Membuat code prediction yang akan digunakan untuk proses deployment.
# """

# import streamlit as st
# import joblib
# import pickle
# # import warnings
# # warnings.filterwarnings('ignore')

# #Load the best trained model from a pickle file
# # def load_model(filename):
# #     with open(filename, 'rb') as file:
# #         model = pickle.load(file)
# #     return model

# #Make predictions base on model and user input
# def predict_with_model(model, user_input):
#     prediction = model.predict([user_input])
#     return prediction[0]

# model = joblib.load('best_model.pkl')
# def main():
#     # model_file = joblib.load('best_model.pkl')
#     # model_file = 'best_model.pkl'
#     # model = load_model(model_file)

#     input = [0,1,0,1,1,1,0,1,0,0,0,1]
#     prediction = predict_with_model(model, input)
#     print(f"The predicted output is: {prediction}")

# if __name__ == "__main__":
#     main()

# -*- coding: utf-8 -*-
"""
PredictionUTS_Model_Deployment_2602179334_Rachel_Andrea_Sumaiku.ipynb
Automatically generated by Colab.
Original file is located at
    https://colab.research.google.com/drive/1OcMWE8zC_B0VTvRsI3RElaGnKgsUVYei
"""

import streamlit as st
import joblib

# Function to load the trained model from a pickle file
def load_model(filename):
    try:
        model = joblib.load(filename)
        return model
    except Exception as e:
        # Print the exception if any, it will help us to know what went wrong
        print(f"An error occurred while loading the model: {e}")
        raise

# Function to make predictions based on model and user input
def predict_with_model(model, user_input):
    try:
        prediction = model.predict([user_input])
        return prediction[0]
    except Exception as e:
        print(f"An error occurred during prediction: {e}")
        raise

def main():
    model = load_model('best_model.pkl')
    user_input = [0,1,0,1,1,1,0,1,0,0,0,1]  # Example input
    prediction = predict_with_model(model, user_input)
    print(f"The predicted output is: {prediction}")

if __name__ == "__main__":
    main()
